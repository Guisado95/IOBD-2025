DROP DATABASE IF EXISTS trab1;
CREATE DATABASE trab1;

\c trab1;

-- Tabelas

CREATE TABLE usuario (
    id SERIAL PRIMARY KEY,
    nome VARCHAR(50) NOT NULL,
    email VARCHAR(50) NOT NULL UNIQUE,
    senha VARCHAR(50) NOT NULL,
    data_nascimento DATE CHECK(
        EXTRACT(
            YEAR 
            FROM data_nascimento
        ) >= 1925
    ) 
);

CREATE TABLE conta (
    id SERIAL PRIMARY KEY,
    usuario_id INTEGER REFERENCES usuario(id),
    data_hora_criacao TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    nome_usuario TEXT NOT NULL UNIQUE
);

CREATE TABLE publicacao (
    id SERIAL PRIMARY KEY,
    data_hora TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    texto TEXT,
    arquivo_principal TEXT NOT NULL,
    latitude REAL,
    longitude REAL
);

CREATE TABLE arquivo (
    id SERIAL PRIMARY KEY,
    arquivo TEXT NOT NULL,
    publicacao_id INTEGER REFERENCES publicacao(id)
);

CREATE TABLE comentario (
    id SERIAL PRIMARY KEY,
    texto TEXT NOT NULL,
    data_hora TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    publicacao_id INTEGER REFERENCES publicacao(id),
    conta_id INTEGER REFERENCES conta(id)
);

CREATE TABLE conta_publicacao (
    publicacao_id INTEGER REFERENCES publicacao(id),
    conta_id INTEGER REFERENCES conta(id),
    PRIMARY KEY (publicacao_id, conta_id)
);

-- Inserção de dados nas tabelas

INSERT INTO usuario (nome, email, senha, data_nascimento) VALUES 
    ('Guilherme Berndt', 'guilherme.berndt@gmail.com', md5('senhaguilherme'), '1995-12-01'),
    ('Lido Berndt', 'lidio.berndt@gmail.com', md5('senhalidio'), '1962-02-05'),
    ('Maria Berndt ', 'maria.berndt@gmail.com', md5('senhamaria'), '1961-09-01');

INSERT INTO conta (usuario_id, nome_usuario) VALUES
    (1, '@guilherme.berndt'),
    (1, '@guilherme.gameplays'),
    (2, '@lidio.berndt'),
    (2, '@lidio.marcenaria'),
    (3, '@maria.berndt');

INSERT INTO publicacao (texto, arquivo_principal) VALUES
    ('Natal 2024', 'foto_natal_2024.jpeg'),
    ('Campeonato 2024', 'foto_final_campeonato2024.jpeg'),
    ('Aniversário 63 anos', 'aniversario_2025.jpeg'),
    ('Balcão da Cozinha', 'balcao_cozinha.jpeg'),
    ('Férias 2025', 'ferias_2025.jpeg');

INSERT INTO conta_publicacao (conta_id, publicacao_id) VALUES
    (1, 1),
    (2, 2),
    (3, 3),
    (4, 4),
    (3, 5);

INSERT INTO comentario (texto, conta_id, publicacao_id) VALUES
    ('Dale!', 1, 2),
    ('Baita festa!', 1, 3),
    ('Baita trabalho!', 1, 4),
    ('Linda foto!', 3, 1),
    ('Muito legal a foto!', 5, 1),
    ('Parabéns!', 5, 2);

INSERT INTO arquivo (publicacao_id, arquivo) VALUES
    (1, 'foto_natal_2024_2.jpeg'),
    (1, 'foto_natal_2024_3.jpeg'),
    (4, 'balcao_cozinha_2.jpeg'),
    (4, 'balcao_cozinha_3.jpeg'),
    (4, 'balcao_cozinha_4.jpeg'),
    (5, 'ferias_2025_2.jpeg');

-- 1. Listar o nome do usuário e o nomes das suas contas

SELECT usuario.nome, conta.nome_usuario FROM usuario INNER JOIN conta ON (usuario.id = conta.usuario_id) ORDER BY usuario.nome;

-- 2. Listar as publicações e seus arquivos

SELECT 
    publicacao.texto AS texto_publicacao,
    publicacao.arquivo_principal AS arquivo_principal,
    arquivo.arquivo AS arquivo_adicional
FROM publicacao INNER JOIN arquivo ON publicacao.id = arquivo.publicacao_id ORDER BY publicacao.id;

-- 3.Listar as publicações e seus comentários

SELECT 
    publicacao.texto AS texto_publicacao,
    comentario.texto AS texto_comentario,
    comentario.data_hora AS data_comentario
FROM publicacao LEFT JOIN comentario ON publicacao.id = comentario.publicacao_id ORDER BY publicacao.id;

-- 4. Listar somente publicações com comentários

SELECT 
    publicacao.texto AS texto_publicacao,
    comentario.texto AS texto_comentario,
    comentario.data_hora AS data_comentario
FROM publicacao INNER JOIN comentario ON publicacao.id = comentario.publicacao_id ORDER BY publicacao.id;

-- 5. Retornar a quantidade de contas por usuário

SELECT 
    usuario.nome AS nome_usuario, 
    COUNT(conta.id) AS quantidade_contas
FROM usuario LEFT JOIN conta ON usuario.id = conta.usuario_id GROUP BY usuario.nome ORDER BY usuario.nome;

-- 6. Retornar a quantidade de publicações por usuário

SELECT
    usuario.nome AS nome_usuario,
    COUNT(publicacao.id) AS quantidade_publicacoes
FROM
    usuario 
INNER JOIN 
    conta ON usuario.id = conta.usuario_id
INNER JOIN 
    conta_publicacao ON conta.id = conta_publicacao.conta_id
INNER JOIN
    publicacao ON conta_publicacao.publicacao_id = publicacao.id
ORDER BY usuario.nome;

-- 7. Retornar as publicações com mais comentários

SELECT
    publicacao.texto AS texto_publicacao,
    COUNT(comentario.id) AS total_comentarios 
FROM 
    publicacao 
INNER JOIN 
    comentario ON publicacao.id = comentario.publicacao_id
GROUP BY
    publicacao.texto
ORDER BY
    total_comentarios DESC;

-- 8. Retornar publicações que não tem comentários

SELECT
    publicacao.id,
    publicacao.texto,
    publicacao.arquivo_principal
FROM publicacao LEFT JOIN comentario ON publicacao.id = comentario.publicacao_id WHERE comentario.id IS NULL ORDER BY publicacao.id;

-- 9. Retornar somente usuários que possuem um única conta

SELECT 
    usuario.nome,
    usuario.email
FROM 
    usuario 
INNER JOIN conta ON usuario.id = conta.usuario_id GROUP BY usuario.id, usuario.nome, usuario.email
HAVING 
    COUNT(conta.id) = 1
ORDER BY 
    usuario.nome;

-- 10. Retornar usuários com mais de uma conta sob sua responsabilidade

SELECT 
    usuario.nome,
    usuario.email
FROM 
    usuario 
INNER JOIN conta ON usuario.id = conta.usuario_id GROUP BY usuario.id, usuario.nome, usuario.email
HAVING 
    COUNT(conta.id) > 1
ORDER BY 
    usuario.nome;

-- 11. Retornar publicações sem arquivos adicionais (Sem registros na tabela de arquivo)

SELECT 
    publicacao.id,
    publicacao.texto,
    publicacao.arquivo_principal
FROM 
    publicacao
LEFT JOIN
    arquivo ON publicacao.id = arquivo.publicacao_id
WHERE 
    arquivo.id IS NULL
ORDER BY 
    publicacao.id;

-- 12. Retornar somente publicações compartilhadas por mais de uma conta

SELECT
    publicacao.id,
    publicacao.texto,
    publicacao.arquivo_principal,
    COUNT(conta_publicacao.conta_id) AS total_contas
FROM
    publicacao
INNER JOIN 
    conta_publicacao ON publicacao.id = conta_publicacao.publicacao_id
GROUP BY
    publicacao.id, publicacao.texto, publicacao.arquivo_principal
HAVING 
    COUNT(conta_publicacao.conta_id) > 1
ORDER BY 
    total_contas DESC;

-- 13 Retornar usuários e suas respectivas contas que não criaram nenhuma publicação

SELECT
    usuario.nome AS nome_usuario,
    conta.nome_usuario AS nome_conta
FROM
    usuario
INNER JOIN 
    conta ON usuario.id = conta.usuario_id
LEFT JOIN 
    conta_publicacao ON conta.id = conta_publicacao.conta_id
WHERE
    conta_publicacao.publicacao_id IS NULL
ORDER BY 
    usuario.nome, conta.nome_usuario;

-- 14 Retornar usuários que possuem só publicações sem comentários

SELECT
    usuario.id,
    usuario.nome,
    usuario.email
FROM 
    usuario
INNER JOIN
    conta ON usuario.id = conta.usuario_id
INNER JOIN
    conta_publicacao ON conta.id = conta_publicacao.conta_id
INNER JOIN 
    publicacao ON conta_publicacao.publicacao_id = publicacao.id
LEFT JOIN 
    comentario ON publicacao.id = comentario.publicacao_id
GROUP BY 
    usuario.id, usuario.nome, usuario.email
HAVING 
    COUNT(comentario.id) = 0
ORDER BY
    usuario.nome;

-- 15 Retornar a conta que mais realizou comentários

SELECT 
    conta.id,
    conta.nome_usuario,
    COUNT(comentario.id) AS total_comentarios
FROM
    conta
INNER JOIN 
    comentario ON conta.id = comentario.conta_id
GROUP BY 
    conta.id, conta.nome_usuario
ORDER BY 
    total_comentarios DESC
LIMIT 1;

-- 16 Retornar o nome do usuário e o nome da conta da última conta criada

SELECT 
    usuario.nome AS nome_usuario,
    conta.nome_usuario AS nome_conta,
    conta.data_hora_criacao
FROM
    conta
INNER JOIN 
    usuario ON conta.usuario_id = usuario.id
ORDER BY 
    conta.data_hora_criacao DESC
LIMIT 1;

 -- 17. Retornar usuário(s) que possue(m) a maior quantidade de contas. Retornar pelo menos 1. Nesta questão não obrigatório retornar todos usuários empatados.

SELECT
    usuario.nome,
    usuario.email,
    COUNT(conta.id) AS total_contas
FROM 
    usuario
INNER JOIN 
    conta ON usuario.id = conta.usuario_id
GROUP BY 
    usuario.id, usuario.nome, usuario.email
ORDER BY 
    total_contas DESC
LIMIT 1;

-- 18 Retornar comentários realizados durante a última semana (últimos 7 dias)

SELECT
    comentario.id,
    comentario.texto,
    comentario.data_hora,
    conta.nome_usuario
FROM
    comentario
INNER JOIN 
    conta ON comentario.conta_id = conta.id
WHERE 
    comentario.data_hora >= NOW() - INTERVAL '7 days'
ORDER BY 
    comentario.data_hora DESC;

-- 19. Retornar as contas do(s) usuário(s) mais velho(s). Retornar todos em caso de empate

SELECT 
    usuario.nome AS nome_usuario,
    conta.nome_usuario AS nome_conta,
    usuario.data_nascimento
FROM
    usuario
INNER JOIN 
    conta ON usuario.id = conta.usuario_id
WHERE
    usuario.data_nascimento = (
        SELECT MIN(data_nascimento)
        FROM usuario
    )
ORDER BY
    usuario.data_nascimento;

-- 20. Listar nos primeiros resultados usuários sem conta acima dos usuários com conta

SELECT 
    usuario.nome AS nome_usuario,
    conta.nome_usuario AS nome_conta
FROM
    usuario
LEFT JOIN
    conta ON usuario.id = conta.usuario_id
ORDER BY 
    conta.id IS NULL DESC,
    usuario.nome;

-- 21. Quantidade total de comentários dado um intervalo de datas

SELECT
    COUNT(comentario.id) AS total_comentarios
FROM 
    comentario
WHERE 
    comentario.data_hora BETWEEN '2025-01-01' AND '2025-12-31';

-- 22. Selecione publicações que tenham mais de um arquivo (fora o obrigatório)

SELECT
    publicacao.id,
    publicacao.texto,
    publicacao.arquivo_principal,
    COUNT(arquivo.id) AS total_arquivos_adicionais
FROM
    publicacao
INNER JOIN 
    arquivo ON publicacao.id = arquivo.publicacao_id
GROUP BY
    publicacao.id, publicacao.texto, publicacao.arquivo_principal
HAVING 
    COUNT(arquivo.id) > 0
ORDER BY 
    publicacao.id;

-- 23 Publicações com maior número de caracteres (coluna texto). Cuidar a questão do empate, ou seja, 2 ou mais publicações terem o texto com o mesma quantidade de caracteres

SELECT
    id,
    texto,
    arquivo_principal,
    LENGTH(texto) AS tamanho_texto
FROM
    publicacao
WHERE  
    LENGTH(texto) = (
        SELECT MAX(LENGTH(texto))
        FROM publicacao
    )
ORDER BY
    id;

-- 24. Usuário que mais publicou em um dado intervalo de tempo

SELECT
    usuario.nome,
    usuario.email,
    COUNT(publicacao.id) AS total_publicacoes
FROM
    usuario
INNER JOIN conta ON usuario.id = conta.usuario_id
INNER JOIN conta_publicacao ON conta.id = conta_publicacao.conta_id
INNER JOIN publicacao ON conta_publicacao.publicacao_id = publicacao.id
WHERE
    publicacao.data_hora BETWEEN '2025-01-01' AND '2025-12-31'
GROUP BY
    usuario.id, usuario.nome, usuario.email
ORDER BY
    total_publicacoes DESC
LIMIT 1;

-- 25. Conta que mais publicou

SELECT
    conta.id,
    conta.nome_usuario,
    COUNT(conta_publicacao.publicacao_id) AS total_publicacoes
FROM 
    conta
INNER JOIN 
    conta_publicacao ON conta.id = conta_publicacao.conta_id
GROUP BY
    conta.id, conta.nome_usuario
ORDER BY
    total_publicacoes DESC
LIMIT 1;

-- 26. Conta que mais compartilhou publicações

-- não há distinção, na prática, desta consulta para a anterior, portanto, o script é o mesmo.

-- 27. Publicação com mais arquivos

SELECT
    publicacao.id,
    publicacao.texto,
    publicacao.arquivo_principal,
    COUNT(arquivo.id) AS total_arquivos_adicionais
FROM 
    publicacao
INNER JOIN
    arquivo ON publicacao.id = arquivo.publicacao_id
GROUP BY
    publicacao.id, publicacao.texto, publicacao.arquivo_principal
ORDER BY
    total_arquivos_adicionais DESC
LIMIT 1;

-- 28. Alterar a tabela conta_publicação e adicionar a data e hora em que uma publicação foi compartilhada

ALTER TABLE conta_publicacao
ADD COLUMN data_hora_compartilhamento TIMESTAMP DEFAULT CURRENT_TIMESTAMP;

-- 29. Usuário que mais realizou comentários

SELECT
    usuario.id,
    usuario.nome,
    usuario.email,
    COUNT(comentario.id) AS total_comentarios
FROM
    usuario
INNER JOIN conta ON usuario.id = conta.usuario_id
INNER JOIN comentario ON conta.id = comentario.conta_id
GROUP BY
    usuario.id, usuario.nome, usuario.email
ORDER BY
    total_comentarios DESC
LIMIT 1;

-- 30. Conta que mais realizou comentários

SELECT 
    conta.id,
    conta.nome_usuario,
    COUNT(comentario.id) AS total_comentarios
FROM
    conta
INNER JOIN comentario ON conta.id = comentario.conta_id
GROUP BY
    conta.id, conta.nome_usuario
ORDER BY
    total_comentarios DESC
LIMIT 1;
